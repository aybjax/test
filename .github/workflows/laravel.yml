name: Laravel

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # testing laravel
  initialize-artifacts:
    name: Initializing artifact to avoid errors
    runs-on: ubuntu-latest
    steps:
      - run: echo "none" > test_status.txt
      - name: upload the test status
        uses: actions/upload-artifact@v2
        with:
          name: test_status
          path: test_status.txt
      - run: echo "none" > do_status.txt
      - name: upload the test do_status
        uses: actions/upload-artifact@v2
        with:
          name: do_status
          path: do_status.txt

  laravel-tests:
    name: Testing laravel php unit and feature
    needs: [initialize-artifacts]
    runs-on: ubuntu-latest
    steps:
    - uses: shivammathur/setup-php@b7d1d9c9a92d8d8463ce36d7f60da34d461724f8
      with:
        php-version: '8.0'
    - uses: actions/checkout@v2
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    - name: Generate key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: vendor/bin/phpunit
    - name: get the status of the test
      if: always()
      run: echo ${{ job.status }} > test_status.txt
    - name: upload the test status
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test_status
        path: test_status.txt
  
  # if tests are ok => connect to digital ocean
  connect-do:
    needs: [initialize-artifacts, laravel-tests]
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          script: |
            echo "hello"
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
      - name: get the status of the test
        if: always()
        run: echo ${{ job.status }} > do_status.txt
      - name: upload the ssh status
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: do_status
          path: do_status.txt
  
  # send email if failure
  send-mail:
    runs-on: ubuntu-latest
    needs: [initialize-artifacts, laravel-tests, connect-do]
    if: always()
    steps:
      - name: Download artifact test_status
        uses: actions/download-artifact@v2
        with:
          name: test_status
      - name: Download artifact do_status
        uses: actions/download-artifact@v2
        with:
          name: do_status
      - name: Set the dummy variables
        if: always()
        run: |
          test_status="none"
          do_status="none"
      - name: Set the statuses into variables
        run: |
          test_status=$(<test_status.txt)
          do_status=$(<do_status.txt)
      - name: send email if errors occured
        if: always()
        # sending email
        uses: dawidd6/action-send-mail@v2
        with:
          # mail server settings
          server_address: smtp.gmail.com
          server_port: 465
          # user credentials
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          # email subject
          subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.laravel-tests.status }}
          # email body as text
          body: ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}
          # comma-separated string, send email to
          to: aybjax@gmail.com #,aybat93@gmail.com
          # from email name
          from: Portal Dimedus Github

#     job1:
#       runs-on: ubuntu-latest
#       steps:
#         - run: echo "hello";
#         - run: echo "hi";
#         - run: exit 1;
#         - run: echo ${{ job.status }} > status_job01.txt
#           if: always()
#         - if: always()
#           uses: actions/upload-artifact@v2
#           with:
#             name: pass_status_job01
#             path: status_job01.txt
#     job2:
#       runs-on: ubuntu-latest
#       steps:
#         - run: echo "ho ho ho ho";
#         - run: echo ${{ job.status }} > status_job02.txt
#           if: always()
#         - if: always()
#           uses: actions/upload-artifact@v2
#           with:
#             name: pass_status_job02
#             path: status_job02.txt
#     job3:
#       needs: [job1, job2]
#       if: always()
#       runs-on: ubuntu-latest
#       steps:
#         - name: Download artifact pass_status_job01
#           uses: actions/download-artifact@v2
#           with:
#             name: pass_status_job01
#         - name: Download artifact pass_status_job02
#           uses: actions/download-artifact@v2
#           with:
#             name: pass_status_job02
#         - name: Set the statuses of Job 01 and Job 02 as output parameters
#           id: set_outputs
#           run: |
#             echo "::set-output name=status_job01::$(<pass_status_job01/status_job01.txt)"
#             echo "::set-output name=status_job02::$(<pass_status_job02/status_job02.txt)"

#         - name: Show the values of the outputs
#           run: |
#             # using the syntax steps.<step_id>.outputs.<output_name> to access the output parameters
#             echo "status_job01 = ${{ steps.set_outputs.outputs.status_job01 }}"
#             echo "status_job02 = ${{ steps.set_outputs.outputs.status_job02 }}"

  
